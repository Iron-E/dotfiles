{
	"buildFHSEnv": {
		"body": [
			"buildFHSEnv {",
			"\tname = \"${1:foo}\";",
			"\trunScript = \"${2:bash}\"; # the program to run inside the env",
			"\tmultiArch = ${3|false,true|}; # install 32-bit packages in 64-bit environments",
			"",
			"\t# Additional derivation outputs to be linked for both target and multi-architecture packages.",
			"\textraOutputsToInstall = [ $4 ];",
			"",
			"\t# cross-platform packages (libraries)",
			"\tmultiPkgs = pkgs: (with pkgs; [ $5 ]);",
			"",
			"\t# host platform packages (binaries)",
			"\ttargetPkgs = pkgs: (with pkgs; [ $6 ]);",
			"",
			"\t# Additional commands to be executed for finalizing the directory structure.",
			"\textraBuildCommands = /* sh */ ''$7'';",
			"",
			"\t# Like extraBuildCommands, but executed only on multilib architectures.",
			"\textraBuildCommandsMulti = /* sh */ ''$8'';",
			"",
			"\t# Additional commands to be executed for finalizing the derivation with runner script.",
			"\textraInstallCommands = /* sh */ ''$9'';",
			"}${0:;}"
		],
		"prefix": "buildFHSEnv"
	},
	"buildPythonPackage": {
		"body": [
			"let",
			"\towner = \"packit\";",
			"\tpname = \"specfile\";",
			"\tversion = \"0.28.2\";",
			"in python3Packages.buildPythonPackage {",
			"\tinherit pname version;",
			"\tpyproject = ${1|true,false|};",
			"",
			"\tsrc = fetchFromGitHub {",
			"\t\tinherit owner;",
			"\t\trepo = pname;",
			"\t\trev = version;",
			"\t\thash = lib.fakeHash;",
			"\t};",
			"",
			"\tbuild-system = with python3Packages; [ ${2:setuptools} ];",
			"\tdependencies = with python3Packages; [ ${3:rpm} ];",
			"",
			"\tmeta = {",
			"\t\tdescription = \"${4:desc}\";",
			"\t\thomepage = \"https://github.com/${owner}/${pname}\";",
			"\t\tlicense = with lib.licenses; [ ${5:mit} ];",
			"\t\tmainProgram = pname;",
			"\t};",
			"}${0:;}"
		],
		"prefix": "buildPythonPackage"
	},
	"buildRustPackage": {
		"body": [
			"(pkgs.makeRustPlatform { cargo = toolchain; rustc = toolchain; }).buildRustPackage {",
			"\tpname = \"${1:name}\";",
			"\tversion = \"${2:0.1.0}\";",
			"",
			"\t# linked in final output/check",
			"\tbuildInputs = with pkgs; [ ${3:openssl} ];",
			"\tcheckInputs = with pkgs; [ $4 ];",
			"",
			"\t# available during build/check",
			"\tnativeBuildInputs = with pkgs; [ makeWrapper pkg-config ];",
			"\tnativeCheckInputs = with pkgs; [ $5 ];",
			"",
			"\tcargoLock = {",
			"\t\tlockFile = ./Cargo.lock;",
			"\t\toutputHashes = {",
			"\t\t\t\"${6:my_dependency-0.1.0}\" = pkgs.lib.fakeSha256;",
			"\t\t};",
			"\t};",
			"",
			"\tsrc = with lib.fileset; (toSource {",
			"\t\troot = ./.;",
			"\t\tfileset = unions [ ./Cargo.lock ./Cargo.toml ./src$7 ];",
			"\t});",
			"",
			"\tpostFixup = ''",
			"\t\twrapProgram \"\\$out/bin/${1:name}\" \\",
			"\t\t\t--suffix PATH : \"${lib.makeBinPath (with pkgs; [ $8 ])}\"",
			"\t'';",
			"",
			"\tmeta = {",
			"\t\tdescription = \"${9:desc}\";",
			"\t\thomepage = \"${10:url}\";",
			"\t\tlicense = with pkgs.lib.licenses; [${11:gpl3Plus}];",
			"\t\tmainProgram = \"${1:name}\";",
			"\t};",
			"}$0"
		],
		"prefix": "buildRustPackage"
	},
	"docker-image + oci-image + streamLayeredImage": {
		"body": [
			"let",
			"\tinherit (pkgs) dockerTools;",
			"\tgroup = \"${3:group}\";",
			"\tuser = \"${4:user}\";",
			"in dockerTools.streamLayeredImage { # https://nixos.org/manual/nixpkgs/unstable#ssec-pkgs-dockerTools-streamLayeredImage",
			"\tname = \"${1:hello-world}\";",
			"\ttag = \"${2:latest}\";",
			"\tcreated = \"$CURRENT_YEAR-$CURRENT_MONTH-${CURRENT_DATE}T$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND$CURRENT_TIMEZONE_OFFSET\"; # date --iso-8601='seconds' --utc",
			"",
			"\tenableFakechroot = true;",
			"\tfakeRootCommands = /* sh */ ''",
			"\t\t${dockerTools.shadowSetup}",
			"\t\tgroupadd --system --gid 1001 \\${group}",
			"\t\tuseradd --system --uid 1001 \\${user}$5",
			"\t'';",
			"",
			"\tcontents = with pkgs; [ $6 ];",
			"\tconfig = {",
			"\t\tEntrypoint = [ \"${lib.getExe ${1:hello-world}}\" ];",
			"\t\tUser = \"\\${user}:\\${group}\";",
			"\t};",
			"}$0"
		],
		"prefix": ["docker-image", "oci-image", "streamLayeredImage"]
	},
	"flake": {
		"body": [
			"{",
			"\tdescription = \"${1:desc}\";",
			"",
			"\tinputs = {",
			"\t\tnixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";",
			"\t};",
			"",
			"\toutputs = inputs @ {",
			"\t\tself,",
			"\t\tnixpkgs,",
			"\t\t...",
			"\t}: {",
			"\t\t$0",
			"\t};",
			"}"
		],
		"prefix": "flake"
	},
	"genSystems": {
		"body": "genSystems = lib.genAttrs [\"aarch64-darwin\" \"aarch64-linux\" \"i686-linux\" \"x86_64-darwin\" \"x86_64-linux\"];",
		"prefix": "genSystems"
	},
	"home-manager": {
		"body": [
			"{ inputs, outputs, config, lib, pkgs, ... }:",
			"let",
			"\tutil = outputs.lib;",
			"in {",
			"\timports = [];",
			"",
			"\t${0:$TM_SELECTED_TEXT}",
			"}"
		],
		"prefix": "home-manager"
	},
	"home-manager-default": {
		"body": [
			"{ inputs, outputs, config, lib, pkgs, ... }:",
			"let",
			"\tutil = outputs.lib;",
			"in {",
			"\timports = util.fs.readSubmodules ./.;",
			"",
			"\t${0:$TM_SELECTED_TEXT}",
			"}"
		],
		"prefix": "home-manager-default"
	},
	"istrlang": {
		"body": "/* ${1:lang} */ ''$2''$0",
		"prefix": "istrlang"
	},
	"let-util": {
		"body": ["let", "\tutil = outputs.lib;", "in"],
		"prefix": "let-util"
	},
	"mkFileset": {
		"body": [
			"mkFileset = fileset: lib.fileset.toSource {",
			"\tinherit fileset;",
			"\troot = ./.;",
			"};"
		],
		"prefix": "mkFileset"
	},
	"mkPkgs": {
		"body": [
			"mkPkgs = system: import nixpkgs {",
			"\tinherit system;",
			"\tconfig.allowUnfree = true;",
			"\toverlays = [$0];",
			"};"
		],
		"prefix": "mkPkgs"
	},
	"mkShell": {
		"body": [
			"pkgs.mkShell {",
			"\tname = \"${1:name}\";",
			"\tinputsFrom = with pkgs; [ ",
			"\t\t${2:openssl} ",
			"\t];",
			"",
			"\tpackages = with pkgs; [",
			"\t\t${3:kubectl}",
			"\t];",
			"}$0"
		],
		"prefix": "mkShell"
	},
	"module": {
		"body": ["{ ... }: {", "\timports = [];", "", "\t$0", "}"],
		"prefix": "module"
	},
	"multiline": {
		"body": ["/* ${1:lang} */ ''", "\t${0:body}", "'';"],
		"prefix": "multiline"
	},
	"readSubmodules": {
		"body": "outputs.lib.fs.readSubmodules ./.",
		"prefix": "readSubmodules"
	},
	"strlang": {
		"body": "/* ${1:lang} */ \"$0\"",
		"prefix": "strlang"
	},
	"util": {
		"body": "util = outputs.lib;",
		"prefix": "util"
	}
}
