{
	"k-ingress-tls": {
		"body": [
			"# https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",
			"apiVersion: 'v1'",
			"kind: 'Secret'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-tls_secret-${5}-${2}'",
			"type: 'kubernetes.io/tls'",
			"# The TLS secret must contain keys named 'tls.crt' and 'tls.key' that contain the certificate and private key to use for TLS.",
			"data:",
			"  tls.crt: 'base64 encoded cert'",
			"  tls.key: 'base64 encoded key'",
			"",
			"---",
			"apiVersion: 'networking.k8s.io/v1'",
			"kind: 'Ingress'",
			"metadata:",
			"  <<: *metadata",
			"  name: '${4}-${3}-${1}-tls_ingress-${5}-${2}'",
			"spec:",
			"  tls:",
			"  - hosts:",
			"    - &hostName '${6:https-example.foo.com}'",
			"    secretName: *secretName",
			"  rules:",
			"  - host: *hostName",
			"    http:",
			"      paths:",
			"      - path: '/${7}'",
			"        pathType: 'Prefix'",
			"        backend:",
			"          service:",
			"            name: '${8:service1}'",
			"            port:",
			"              number: ${9:80}",
			"---",
			"$0"
		],
		"description": "k8s Ingress with TLS",
		"prefix": "kugress-tls"
	},
	"k8s ConfigMap": {
		"body": [
			"# https://kubernetes.io/docs/concepts/configuration/configmap/",
			"apiVersion: 'v1'",
			"kind: 'ConfigMap'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-config_map-${5}-${2}'",
			"data:",
			"  ${6:key}: '${7:value}'",
			"---",
			"$0"
		],
		"description": "k8s ConfigMap",
		"prefix": "konfig-map"
	},
	"k8s CronJob": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/",
			"apiVersion: 'batch/v1beta1'",
			"kind: 'CronJob'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-cron_job-${5}-${2}'",
			"spec:",
			"  schedule: '${6:*/1 * * * *}'",
			"  jobTemplate:",
			"    spec:",
			"      template:",
			"        spec:",
			"          containers:",
			"          - name: '${7:$1}'",
			"            image: '${8:busybox}'",
			"            args: ['/bin/sh', '-c', '${9:date; echo Hello from the Kubernetes cluster}']",
			"          restartPolicy: 'OnFailure'",
			"---",
			"$0"
		],
		"description": "k8s CronJob",
		"prefix": "kron-job"
	},
	"k8s DaemonSet": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
			"apiVersion: 'apps/v1'",
			"kind: 'DaemonSet'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-daemon_set-${5}-${2}'",
			"spec:",
			"  selector:",
			"    matchLabels: *labels",
			"  template:",
			"    metadata:",
			"      annotations:",
			"        kubectl.kubernetes.io/default-container: '$1'",
			"      labels: *labels",
			"      namespace: *namespace",
			"    spec:",
			"      tolerations:",
			"      # this toleration is to have the daemonset runnable on master nodes",
			"      # remove it if your masters can't run pods",
			"      - key: 'node-role.kubernetes.io/master'",
			"        effect: 'NoSchedule'",
			"      containers:",
			"      - name: '$1'",
			"        image: '${1}-${2}'",
			"        resources:",
			"          limits:",
			"            memory: '200Mi'",
			"          requests:",
			"            cpu: '100m'",
			"            memory: '200Mi'",
			"        volumeMounts:",
			"        - name: 'localtime'",
			"          mountPath: '/etc/localtime'",
			"      terminationGracePeriodSeconds: 30",
			"      volumes:",
			"      - name: 'localtime'",
			"        hostPath:",
			"          path: '/usr/share/zoneinfo/Asia/Taipei'",
			"---",
			"$0"
		],
		"description": "k8s DaemonSet",
		"prefix": "kaemon-set"
	},
	"k8s Deployment": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
			"apiVersion: 'apps/v1'",
			"kind: 'Deployment'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-deployment-${5}-${2}'",
			"spec:",
			"  selector:",
			"    matchLabels: *labels",
			"  replicas: 1",
			"  strategy:",
			"    rollingUpdate:",
			"      maxSurge: '25%'",
			"      maxUnavailable: '25%'",
			"    type: 'RollingUpdate'",
			"  template:",
			"    metadata:",
			"      annotations:",
			"        kubectl.kubernetes.io/default-container: '$1'",
			"      labels: *labels",
			"      namespace: *namespace",
			"    spec:",
			"      # initContainers:",
			"        # Init containers are exactly like regular containers, except:",
			"          # - Init containers always run to completion.",
			"          # - Each init container must complete successfully before the next one starts.",
			"      containers:",
			"      - name: '$1'",
			"        image: '${1}-${2}'",
			"        imagePullPolicy: ${4|IfNotPresent,Always,Never|}",
			"        resources:",
			"          requests:",
			"            cpu: '100m'",
			"            memory: '100Mi'",
			"          limits:",
			"            cpu: '100m'",
			"            memory: '100Mi'",
			"        livenessProbe:",
			"          tcpSocket:",
			"            port: ${5:80}",
			"          initialDelaySeconds: 5",
			"          timeoutSeconds: 5",
			"          successThreshold: 1",
			"          failureThreshold: 3",
			"          periodSeconds: 10",
			"        readinessProbe:",
			"          httpGet:",
			"            path: '/_status/healthz'",
			"            port: ${5:80}",
			"          initialDelaySeconds: 5",
			"          timeoutSeconds: 2",
			"          successThreshold: 1",
			"          failureThreshold: 3",
			"          periodSeconds: 10",
			"        env:",
			"        - name: 'DB_HOST'",
			"          valueFrom:",
			"            configMapKeyRef:",
			"              name: '${1:myjob}'",
			"              key: 'DB_HOST'",
			"        ports:",
			"        - containerPort: ${5:80}",
			"          name: '${1:myjob}'",
			"        volumeMounts:",
			"        - name: 'localtime'",
			"          mountPath: '/etc/localtime'",
			"      volumes:",
			"        - name: 'localtime'",
			"          hostPath:",
			"            path: '/usr/share/zoneinfo/Asia/Taipei'",
			"      restartPolicy: 'Always'",
			"---",
			"$0"
		],
		"description": "k8s Deployment",
		"prefix": "keployment"
	},
	"k8s Ingress": {
		"body": [
			"# https://kubernetes.io/docs/concepts/services-networking/ingress/",
			"apiVersion: 'networking.k8s.io/v1'",
			"kind: 'Ingress'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-ingress-${5}-${2}'",
			"spec:",
			"  rules:",
			"  - host: ${6:example.foo.com}",
			"    http:",
			"      paths:",
			"      - path: '/${7}'",
			"        pathType: ${8|Prefix,Exact|}",
			"        backend:",
			"          service:",
			"            name: ${9:service1}",
			"            port:",
			"              number: ${10:80}",
			"---",
			"$0"
		],
		"description": "k8s Ingress",
		"prefix": "kugress"
	},
	"k8s Ingress with Rewrite rule": {
		"body": [
			"# https://kubernetes.io/docs/concepts/services-networking/ingress/",
			"apiVersion: 'networking.k8s.io/v1'",
			"kind: 'Ingress'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-ingress-${5}-${2}'",
			"  # https://kubernetes.github.io/ingress-nginx/examples/rewrite/",
			"  annotations:",
			"    nginx.ingress.kubernetes.io/rewrite-target: '/\\$1'",
			"spec:",
			"  rules:",
			"  - host: ${5:example.foo.com}",
			"    http:",
			"      paths:",
			"      - path: ${6:/api/(.*)}",
			"        pathType: 'Prefix'",
			"        backend:",
			"          service:",
			"            name: ${7:service1}",
			"            port:",
			"              number: ${8:80}",
			"---",
			"$0"
		],
		"description": "k8s Ingress with Rewrite rule",
		"prefix": "kugress-rewrite"
	},
	"k8s Job": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/controllers/job/",
			"apiVersion: 'batch/v1'",
			"kind: 'Job'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-job-${5}-${2}'",
			"spec:",
			"  template:",
			"    metadata:",
			"      <<: *metadata",
			"      name: '${4}-${3}-${1}-pod-${5}-${2}'",
			"    spec:",
			"      containers:",
			"      - name: '$1'",
			"        image: ${6:python:3.7.6-alpine3.10}",
			"        command: ['sh', '-c', '${7:python3 manage.py makemigrations && python3 manage.py migrate}']",
			"        env:",
			"        - name: 'ENV_NAME'",
			"          value: 'ENV_VALUE'",
			"        volumeMounts:",
			"        - name: 'localtime'",
			"          mountPath: '/etc/localtime'",
			"      volumes:",
			"      - name: 'localtime'",
			"        hostPath:",
			"          path: '/usr/share/zoneinfo/Asia/Taipei'",
			"      restartPolicy: 'OnFailure'",
			"      dnsPolicy: 'ClusterFirst'",
			"---",
			"$0"
		],
		"description": "k8s Job",
		"prefix": "kob"
	},
	"k8s PersistentVolumeClaim": {
		"body": [
			"# https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
			"apiVersion: 'v1'",
			"kind: 'PersistentVolumeClaim'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-volume_claim-${5}-${2}'",
			"spec:",
			"  # AKS: default,managed-premium",
			"  # GKE: standard",
			"  # EKS: gp2 (custom)",
			"  # Rook: rook-ceph-block,rook-ceph-fs",
			"  storageClassName: ${3|default,managed-premium,standard,gp2,rook-ceph-block,rook-ceph-fs|}",
			"  accessModes:",
			"  - ${6|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
			"  resources:",
			"    requests:",
			"      storage: '${7:2Gi}'",
			"---",
			"$0"
		],
		"description": "k8s PersistentVolumeClaim",
		"prefix": "klaim"
	},
	"k8s Pod": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/pods/",
			"apiVersion: 'v1'",
			"kind: 'Pod'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-pod-${5}-${2}'",
			"  annotations:",
			"    kubectl.kubernetes.io/default-container: '$1'",
			"spec:",
			"  containers:",
			"    - name: '$1'",
			"      image: '${1}-${2}'",
			"    resources:",
			"      limits:",
			"        cpu: '200m'",
			"        memory: '500Mi'",
			"      requests:",
			"        cpu: '100m'",
			"        memory: '200Mi'",
			"    env:",
			"    - name: 'DB_HOST'",
			"      valueFrom:",
			"        configMapKeyRef:",
			"          name: 'myapp'",
			"          key: 'DB_HOST'",
			"    ports:",
			"    - containerPort: ${6:80}",
			"      name: 'http'",
			"    volumeMounts:",
			"    - name: 'localtime'",
			"      mountPath: '/etc/localtime'",
			"  volumes:",
			"  - name: 'localtime'",
			"    hostPath:",
			"      path: '/usr/share/zoneinfo/Asia/Taipei'",
			"  restartPolicy: 'Always'",
			"---",
			"$0"
		],
		"description": "k8s Pod",
		"prefix": "kod"
	},
	"k8s Secret": {
		"body": [
			"# https://kubernetes.io/docs/concepts/configuration/secret/",
			"apiVersion: 'v1'",
			"kind: 'Secret'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-secret-${5}-${2}'",
			"type: 'Opaque'",
			"data:",
			"  # must be base 64:",
			"  ${6:key}: '${7:value}'",
			"---",
			"$0"
		],
		"description": "k8s Secret",
		"prefix": "kecret"
	},
	"k8s Service": {
		"body": [
			"# https://kubernetes.io/docs/concepts/services-networking/service/",
			"apiVersion: 'v1'",
			"kind: 'Service'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-service-${5}-${2}'",
			"spec:",
			"  selector:",
			"    matchLabels: &labels",
			"  type: ${3|ClusterIP,NodePort,LoadBalancer|}",
			"  ports:",
			"  - name: '$1'",
			"    protocol: ${6|TCP,UDP|}",
			"    port: ${7:80}",
			"    targetPort: ${8:5000}",
			"    nodePort: ${9:30001}",
			"---",
			"$0"
		],
		"description": "k8s Service",
		"prefix": "kervice"
	},
	"k8s StatefulSet": {
		"body": [
			"# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/",
			"apiVersion: 'apps/v1'",
			"kind: 'StatefulSet'",
			"metadata: &metadata",
			"  labels: &labels",
			"    app.kubernetes.io/name: &appName '$1'",
			"    app.kubernetes.io/version: &appVersion '${2:latest}'",
			"    app.kubernetes.io/component: '$3'",
			"    app.kubernetes.io/part-of: &projectName '$4'",
			"  namespace: &namespace '${5:default}'",
			"  name: '${4}-${3}-${1}-stateful_set-${5}-${2}'",
			"spec:",
			"  selector:",
			"    matchLabels: *labels",
			"  serviceName: '$1'",
			"  replicas: ${6:3} # by default is 1",
			"  template:",
			"    metadata:",
			"      annotations:",
			"        kubectl.kubernetes.io/default-container: '$1'",
			"      labels: *labels",
			"    spec:",
			"      terminationGracePeriodSeconds: 10",
			"      containers:",
			"      - name: '$1'",
			"        image: '${1}-${2}'",
			"        ports:",
			"        - containerPort: ${7:80}",
			"          name: '$1'",
			"        volumeMounts:",
			"        - name: '${8:www}'",
			"          mountPath: '/usr/share/nginx/html'",
			"  volumeClaimTemplates:",
			"  - metadata:",
			"      name: '${8:www}'",
			"    spec:",
			"      storageClassName: ${9:my-storage-class}",
			"      accessModes:",
			"      - ${10|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
			"      resources:",
			"        requests:",
			"          storage: '${11:1Gi}'",
			"---",
			"$0"
		],
		"description": "k8s StatefulSet",
		"prefix": "kateful-set"
	},
	"kind": {
		"body": [
			"kind: $1",
			"metadata:",
			"  labels:",
			"    app.kubernetes.io/name: '$2'",
			"    app.kubernetes.io/version: '${3:latest}'",
			"    app.kubernetes.io/component: '$4'",
			"    app.kubernetes.io/part-of: '$5'",
			"  namespace: '${6:default}'",
			"  name: '${5}-${4}-${2}-${1/(.*)/${1:/downcase}/}-${6}-${3}'"
		],
		"prefix": "kind"
	},
	"labels": {
		"body": [
			"labels:",
			"  app.kubernetes.io/name: '$1'",
			"  app.kubernetes.io/version: '${2:latest}'",
			"  app.kubernetes.io/component: '$3'",
			"  app.kubernetes.io/part-of: '$4'"
		],
		"prefix": "labels"
	}
}
