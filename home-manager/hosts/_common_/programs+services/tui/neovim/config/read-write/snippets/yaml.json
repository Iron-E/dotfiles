{
  "k8s ConfigMap": {
    "body": [
      "# https://kubernetes.io/docs/concepts/configuration/configmap/",
      "apiVersion: 'v1'",
      "kind: 'ConfigMap'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "data:",
      "  ${6:key}: '${7:value}'",
      "---",
      "$0"
    ],
    "description": "k8s ConfigMap",
    "prefix": "konfig-map"
  },
  "k8s CronJob": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/",
      "apiVersion: 'batch/v1beta1'",
      "kind: 'CronJob'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  schedule: '${6:*/1 * * * *}'",
      "  jobTemplate:",
      "    spec:",
      "      template:",
      "        spec:",
      "          containers:",
      "          - name: '${7:$1}'",
      "            image: '${8:busybox}'",
      "            args: ['/bin/sh', '-c', '${9:date; echo Hello from the Kubernetes cluster}']",
      "          restartPolicy: 'OnFailure'",
      "---",
      "$0"
    ],
    "description": "k8s CronJob",
    "prefix": "kron-job"
  },
  "k8s DaemonSet": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
      "apiVersion: 'apps/v1'",
      "kind: 'DaemonSet'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  selector:",
      "    matchLabels: *labels",
      "  template:",
      "    metadata:",
      "      annotations:",
      "        kubectl.kubernetes.io/default-container: *appName",
      "      labels: *labels",
      "      namespace: *namespace",
      "    spec:",
      "      tolerations:",
      "      # this toleration is to have the daemonset runnable on master nodes",
      "      # remove it if your masters can't run pods",
      "      - key: 'node-role.kubernetes.io/master'",
      "        effect: 'NoSchedule'",
      "      containers:",
      "      - name: *appName",
      "        image: '${1}:${2:latest}'",
      "        resources:",
      "          limits:",
      "            memory: '200Mi'",
      "          requests:",
      "            cpu: '100m'",
      "            memory: '200Mi'",
      "        volumeMounts:",
      "        - name: 'localtime'",
      "          mountPath: '/etc/localtime'",
      "      terminationGracePeriodSeconds: 30",
      "      volumes:",
      "      - name: 'localtime'",
      "        hostPath:",
      "          path: '/usr/share/zoneinfo/Asia/Taipei'",
      "---",
      "$0"
    ],
    "description": "k8s DaemonSet",
    "prefix": "kaemon-set"
  },
  "k8s Job": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/job/",
      "apiVersion: 'batch/v1'",
      "kind: 'Job'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  template:",
      "    metadata: *metadata",
      "    spec:",
      "      containers:",
      "      - name: *appName",
      "        image: ${6:python:3.7.6-alpine3.10}",
      "        command: ['sh', '-c', '${7:python3 manage.py makemigrations && python3 manage.py migrate}']",
      "        env:",
      "        - name: 'ENV_NAME'",
      "          value: 'ENV_VALUE'",
      "        volumeMounts:",
      "        - name: 'localtime'",
      "          mountPath: '/etc/localtime'",
      "      volumes:",
      "      - name: 'localtime'",
      "        hostPath:",
      "          path: '/usr/share/zoneinfo/Asia/Taipei'",
      "      restartPolicy: 'OnFailure'",
      "      dnsPolicy: 'ClusterFirst'",
      "---",
      "$0"
    ],
    "description": "k8s Job",
    "prefix": "kob"
  },
  "k8s Pod": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/pods/",
      "apiVersion: 'v1'",
      "kind: 'Pod'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "  annotations:",
      "    kubectl.kubernetes.io/default-container: '$1'",
      "spec:",
      "  containers:",
      "    - name: '$1'",
      "      image: '${1}:${2:latest}'",
      "    resources:",
      "      limits:",
      "        cpu: '200m'",
      "        memory: '500Mi'",
      "      requests:",
      "        cpu: '100m'",
      "        memory: '200Mi'",
      "    env:",
      "    - name: 'DB_HOST'",
      "      valueFrom:",
      "        configMapKeyRef:",
      "          name: 'myapp'",
      "          key: 'DB_HOST'",
      "    ports:",
      "    - containerPort: ${6:80}",
      "      name: 'http'",
      "    volumeMounts:",
      "    - name: 'localtime'",
      "      mountPath: '/etc/localtime'",
      "  volumes:",
      "  - name: 'localtime'",
      "    hostPath:",
      "      path: '/usr/share/zoneinfo/Asia/Taipei'",
      "  restartPolicy: 'Always'",
      "---",
      "$0"
    ],
    "description": "k8s Pod",
    "prefix": "kod"
  },
  "k8s StatefulSet": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/",
      "apiVersion: 'apps/v1'",
      "kind: 'StatefulSet'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  selector:",
      "    matchLabels: *labels",
      "  serviceName: '$1'",
      "  replicas: ${6:3} # by default is 1",
      "  template:",
      "    metadata:",
      "      annotations:",
      "        kubectl.kubernetes.io/default-container: '$1'",
      "      labels: *labels",
      "      namespace: *namespace",
      "    spec:",
      "      terminationGracePeriodSeconds: 10",
      "      containers:",
      "      - name: '$1'",
      "        image: '${1}:${2:latest}'",
      "        ports:",
      "        - containerPort: ${7:80}",
      "          name: '$1'",
      "        volumeMounts:",
      "        - name: '${8:www}'",
      "          mountPath: '/usr/share/nginx/html'",
      "  volumeClaimTemplates:",
      "  - metadata:",
      "      name: '${8:www}'",
      "    spec:",
      "      storageClassName: ${9:my-storage-class}",
      "      accessModes:",
      "      - ${10|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "      resources:",
      "        requests:",
      "          storage: '${11:1Gi}'",
      "---",
      "$0"
    ],
    "description": "k8s StatefulSet",
    "prefix": "kateful-set"
  },
  "kamespace": {
    "body": [
      "# https://github.com/cloudnative-pg/cloudnative-pg/blob/main/docs/src/quickstart.md",
      "apiVersion: 'v1'",
      "kind: 'Namespace'",
      "metadata: ",
      "  name: '${1:default}'",
      "---",
      "$0"
    ],
    "prefix": "kamespace"
  },
  "kecret": {
    "body": [
      "# https://kubernetes.io/docs/concepts/configuration/secret/",
      "apiVersion: 'v1'",
      "kind: 'Secret'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "type: 'Opaque' # see https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
      "data:",
      "  ${6:key}: '${7:value}'",
      "---",
      "$0"
    ],
    "description": "k8s Secret",
    "prefix": "kecret"
  },
  "keployment": {
    "body": [
      "# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
      "apiVersion: 'apps/v1'",
      "kind: 'Deployment'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: &component '$3'",
      "    app.kubernetes.io/part-of: &partOf '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  selector:",
      "    matchLabels:",
      "      app.kubernetes.io/component: *component",
      "      app.kubernetes.io/name: *appName",
      "      app.kubernetes.io/part-of: *partOf",
      "  replicas: 1",
      "  strategy:",
      "    type: 'RollingUpdate'",
      "    rollingUpdate:",
      "      maxSurge: '25%'",
      "      maxUnavailable: '25%'",
      "  template:",
      "    metadata:",
      "      annotations:",
      "        kubectl.kubernetes.io/default-container: '$1'",
      "      labels: *labels",
      "      namespace: *namespace",
      "    spec:",
      "      # initContainers:",
      "        # Init containers are exactly like regular containers, except:",
      "          # - Init containers always run to completion.",
      "          # - Each init container must complete successfully before the next one starts.",
      "      containers:",
      "        - name: '$1'",
      "          image: '${1}:${2:latest}'",
      "          imagePullPolicy: ${6|IfNotPresent,Always,Never|}",
      "          resources:",
      "            requests:",
      "              cpu: '100m'",
      "              memory: '100Mi'",
      "            limits:",
      "              cpu: '100m'",
      "              memory: '100Mi'",
      "          livenessProbe:",
      "            tcpSocket:",
      "              port: ${7:80}",
      "            initialDelaySeconds: 5",
      "            timeoutSeconds: 5",
      "            successThreshold: 1",
      "            failureThreshold: 3",
      "            periodSeconds: 10",
      "          readinessProbe:",
      "            httpGet:",
      "              path: '/_status/healthy'",
      "              port: ${7:80}",
      "            initialDelaySeconds: 5",
      "            timeoutSeconds: 2",
      "            successThreshold: 1",
      "            failureThreshold: 3",
      "            periodSeconds: 10",
      "          env:",
      "            - name: 'DB_HOST'",
      "              valueFrom:",
      "                configMapKeyRef:",
      "                  name: '$1'",
      "                  key: 'DB_HOST'",
      "          ports:",
      "            - containerPort: ${7:80}",
      "              name: '$1'",
      "          volumeMounts:",
      "            - name: 'localtime'",
      "              mountPath: '/etc/localtime'",
      "      volumes:",
      "        - name: 'localtime'",
      "          hostPath:",
      "            path: '/usr/share/zoneinfo/Asia/Taipei'",
      "      restartPolicy: 'Always'",
      "---",
      "$0"
    ],
    "description": "k8s Deployment",
    "prefix": "keployment"
  },
  "kervice": {
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/service/",
      "apiVersion: 'v1'",
      "kind: 'Service'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}-${3}'",
      "spec:",
      "  selector: *labels",
      "  type: '${6|ClusterIP,NodePort,LoadBalancer|}'",
      "  ports:",
      "    - name: '$1'",
      "      protocol: '${7|TCP,UDP|}'",
      "      port: ${8:80}",
      "      targetPort: ${9:5000}",
      "      nodePort: ${10:30001}",
      "---",
      "$0"
    ],
    "description": "k8s Service",
    "prefix": "kervice"
  },
  "kind": {
    "body": [
      "kind: $1",
      "metadata:",
      "  labels:",
      "    app.kubernetes.io/name: '$2'",
      "    app.kubernetes.io/version: '${3:latest}'",
      "    app.kubernetes.io/component: '$4'",
      "    app.kubernetes.io/part-of: '$5'",
      "  namespace: &namespace '${6:default}'",
      "  name: '${5}.${4}'"
    ],
    "prefix": "kind"
  },
  "klaim": {
    "body": [
      "# https://kubernetes.io/docs/concepts/storage/persistent-volumes/",
      "apiVersion: 'v1'",
      "kind: 'PersistentVolumeClaim'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  # AKS: default,managed-premium",
      "  # GKE: standard",
      "  # EKS: gp2 (custom)",
      "  # Rook: rook-ceph-block,rook-ceph-fs",
      "  storageClassName: '${3|default,managed-premium,standard,gp2,rook-ceph-block,rook-ceph-fs|}'",
      "  accessModes:",
      "  - '${6|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}'",
      "  resources:",
      "    requests:",
      "      storage: '${7:2Gi}'",
      "---",
      "$0"
    ],
    "description": "k8s PersistentVolumeClaim",
    "prefix": "klaim"
  },
  "kluster-kind": {
    "body": [
      "# https://kind.sigs.k8s.io/docs/user/configuration",
      "apiVersion: 'kind.x-k8s.io/v1alpha4'",
      "kind: 'Cluster'",
      "featureGates:",
      "  # CSIMigration: true",
      "runtimeConfig: # maps to the --runtime-config kube-apiserver flag.",
      "  # 'api/alpha': 'false'",
      "networking:",
      "  disableDefaultCNI: false",
      "  ipFamily: '${1|dual,ipv4,ipv6|}'",
      "  kubeProxyMode: '${2|iptables,ipvs,nftables,none|}'",
      "  podSubnet: '${3:10.244.0.0/16}'",
      "  serviceSubnet: '${4:10.96.0.0/16}'",
      "nodes:",
      "  - role: 'control-plane'",
      "    # image: 'kindest/node:v1.16.4@sha256:b91a2c2317a000f3a783489dfb755064177dbc3a0b2f4147d50f04825d016f55'",
      "    extraMounts:",
      "      - hostPath: '${5:/path/to/my/other-files/}'",
      "        containerPath: '${6:/other-files}'",
      "        readOnly: true # default false",
      "        selinuxRelabel: false # if set, the mount needs SELinux relabeling. default false",
      "    extraPortMappings:",
      "      - { containerPort: ${7:80}, hostPort: ${8:80}, protocol: '${10|TCP,UDP,SCTP|}' }",
      "    kubeadmConfigPatches:",
      "      - |",
      "        kind: InitConfiguration",
      "        nodeRegistration:",
      "          kubeletExtraArgs:",
      "            node-labels: \"ingress-ready=true\"",
      "  - role: 'worker'",
      "    labels: { app.kubernetes.io/component: 'frontend' }",
      "  - role: 'worker'",
      "    labels: { app.kubernetes.io/component: 'backend' }",
      "  - role: 'worker'",
      "    labels: { app.kubernetes.io/component: 'database' }"
    ],
    "prefix": "kluster-kind"
  },
  "kluster-pg": {
    "body": [
      "# https://cloudnative-pg.io/documentation/1.22/cloudnative-pg.v1/#postgresql-cnpg-io-v1-Cluster",
      "apiVersion: 'postgresql.cnpg.io/v1'",
      "kind: 'Cluster'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName 'postgres'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: 'database'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.database'",
      "spec:",
      "  instances: 3",
      "  imageName: 'ghcr.io/cloudnative-pg/postgresql:${2:latest}'",
      "",
      "  storage:",
      "    size: '1Gi'",
      "---",
      "$0"
    ],
    "prefix": "kluster-pg"
  },
  "kugress": {
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/",
      "apiVersion: 'networking.k8s.io/v1'",
      "kind: 'Ingress'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}-${3}'",
      "spec:",
      "  rules:",
      "    - host: '${6:example.foo.com}'",
      "      http:",
      "        paths:",
      "          - path: '/${7:path}'",
      "            pathType: '${8|Prefix,Exact|}'",
      "            backend:",
      "              service:",
      "                name: '${9:service1}'",
      "                port:",
      "                  number: ${10:80}",
      "---",
      "$0"
    ],
    "description": "k8s Ingress",
    "prefix": "kugress"
  },
  "kugress-rewrite": {
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/",
      "apiVersion: 'networking.k8s.io/v1'",
      "kind: 'Ingress'",
      "metadata: &metadata",
      "  annotations:",
      "    # https://kubernetes.github.io/ingress-nginx/examples/rewrite/",
      "    nginx.ingress.kubernetes.io/rewrite-target: '/\\$2'",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}-${3}'",
      "spec:",
      "  ingressClassName: 'nginx'",
      "  rules:",
      "    - host: ${6:example.foo.com}",
      "      http:",
      "        paths:",
      "          - path: /${7:api}(/|$)(.*)",
      "            pathType: 'ImplementationSpecific'",
      "            backend:",
      "              service:",
      "                name: ${8:service1}",
      "                port:",
      "                  number: ${9:80}",
      "---",
      "$0"
    ],
    "description": "k8s Ingress with Rewrite rule",
    "prefix": "kugress-rewrite"
  },
  "kugress-tls": {
    "body": [
      "# https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",
      "apiVersion: 'v1'",
      "kind: 'Secret'",
      "metadata: &metadata",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}-${3}'",
      "type: 'kubernetes.io/tls'",
      "# The TLS secret must contain keys named 'tls.crt' and 'tls.key' that contain the certificate and private key to use for TLS.",
      "data:",
      "  tls.crt: 'base64 encoded cert'",
      "  tls.key: 'base64 encoded key'",
      "---",
      "apiVersion: 'networking.k8s.io/v1'",
      "kind: 'Ingress'",
      "metadata: &metadata",
      "  annotations:",
      "    # https://kubernetes.github.io/ingress-nginx/examples/rewrite/",
      "    nginx.ingress.kubernetes.io/rewrite-target: '/$2'",
      "  labels: &labels",
      "    app.kubernetes.io/name: &appName '$1'",
      "    app.kubernetes.io/version: '${2:latest}'",
      "    app.kubernetes.io/component: '$3'",
      "    app.kubernetes.io/part-of: '$4'",
      "  namespace: &namespace '${5:default}'",
      "  name: '${4}.${3}'",
      "spec:",
      "  ingressClassName: 'nginx'",
      "  tls:",
      "    - hosts:",
      "        - &hostName '${6:https-example.foo.com}'",
      "      secretName: '${7:foo}'",
      "  rules:",
      "    - host: *hostName",
      "      http:",
      "        paths:",
      "          - path: /${8:api}(/|$)(.*)",
      "            pathType: 'ImplementationSpecific'",
      "            backend:",
      "              service:",
      "                name: '${9:service1}'",
      "                port:",
      "                  number: ${10:80}",
      "---",
      "$0"
    ],
    "description": "k8s Ingress with TLS",
    "prefix": "kugress-tls"
  },
  "labels": {
    "body": [
      "labels:",
      "  app.kubernetes.io/name: '$1'",
      "  app.kubernetes.io/version: '${2:latest}'",
      "  app.kubernetes.io/component: '$3'",
      "  app.kubernetes.io/part-of: '$4'"
    ],
    "prefix": "labels"
  },
  "secretKeyRef": {
    "body": [
      "secretKeyRef:",
      "  name: '${1:secretName}'",
      "  key: '${2:secretValueName}'"
    ],
    "prefix": "secretKeyRef"
  }
}
